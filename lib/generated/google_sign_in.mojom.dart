// WARNING: DO NOT EDIT. This file was generated by a program.
// See $MOJO_SDK/tools/bindings/mojom_bindings_generator.py.

library google_sign_in_mojom;
import 'dart:async';
import 'package:mojo/bindings.dart' as bindings;
import 'package:mojo/core.dart' as core;
import 'package:mojo/mojo/bindings/types/service_describer.mojom.dart' as service_describer;



class GoogleSignInUser extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(64, 0)
  ];
  String displayName = null;
  String email = null;
  String id = null;
  String idToken = null;
  String accessToken = null;
  String serverAuthCode = null;
  String photoUrl = null;

  GoogleSignInUser() : super(kVersions.last.size);

  GoogleSignInUser.init(
    String this.displayName, 
    String this.email, 
    String this.id, 
    String this.idToken, 
    String this.accessToken, 
    String this.serverAuthCode, 
    String this.photoUrl
  ) : super(kVersions.last.size);

  static GoogleSignInUser deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static GoogleSignInUser decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    GoogleSignInUser result = new GoogleSignInUser();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.displayName = decoder0.decodeString(8, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.email = decoder0.decodeString(16, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.id = decoder0.decodeString(24, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.idToken = decoder0.decodeString(32, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.accessToken = decoder0.decodeString(40, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.serverAuthCode = decoder0.decodeString(48, true);
    }
    if (mainDataHeader.version >= 0) {
      
      result.photoUrl = decoder0.decodeString(56, true);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(displayName, 8, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "displayName of struct GoogleSignInUser: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(email, 16, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "email of struct GoogleSignInUser: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(id, 24, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "id of struct GoogleSignInUser: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(idToken, 32, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "idToken of struct GoogleSignInUser: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(accessToken, 40, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "accessToken of struct GoogleSignInUser: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(serverAuthCode, 48, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "serverAuthCode of struct GoogleSignInUser: $e";
      rethrow;
    }
    try {
      encoder0.encodeString(photoUrl, 56, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "photoUrl of struct GoogleSignInUser: $e";
      rethrow;
    }
  }

  String toString() {
    return "GoogleSignInUser("
           "displayName: $displayName" ", "
           "email: $email" ", "
           "id: $id" ", "
           "idToken: $idToken" ", "
           "accessToken: $accessToken" ", "
           "serverAuthCode: $serverAuthCode" ", "
           "photoUrl: $photoUrl" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["displayName"] = displayName;
    map["email"] = email;
    map["id"] = id;
    map["idToken"] = idToken;
    map["accessToken"] = accessToken;
    map["serverAuthCode"] = serverAuthCode;
    map["photoUrl"] = photoUrl;
    return map;
  }
}


class GoogleSignInResult extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  GoogleSignInUser user = null;
  bool isSuccess = false;

  GoogleSignInResult() : super(kVersions.last.size);

  GoogleSignInResult.init(
    GoogleSignInUser this.user, 
    bool this.isSuccess
  ) : super(kVersions.last.size);

  static GoogleSignInResult deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static GoogleSignInResult decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    GoogleSignInResult result = new GoogleSignInResult();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, true);
      result.user = GoogleSignInUser.decode(decoder1);
    }
    if (mainDataHeader.version >= 0) {
      
      result.isSuccess = decoder0.decodeBool(16, 0);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeStruct(user, 8, true);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "user of struct GoogleSignInResult: $e";
      rethrow;
    }
    try {
      encoder0.encodeBool(isSuccess, 16, 0);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "isSuccess of struct GoogleSignInResult: $e";
      rethrow;
    }
  }

  String toString() {
    return "GoogleSignInResult("
           "user: $user" ", "
           "isSuccess: $isSuccess" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["user"] = user;
    map["isSuccess"] = isSuccess;
    return map;
  }
}


class _GoogleSignInListenerOnSignInParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  GoogleSignInResult result = null;

  _GoogleSignInListenerOnSignInParams() : super(kVersions.last.size);

  _GoogleSignInListenerOnSignInParams.init(
    GoogleSignInResult this.result
  ) : super(kVersions.last.size);

  static _GoogleSignInListenerOnSignInParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GoogleSignInListenerOnSignInParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GoogleSignInListenerOnSignInParams result = new _GoogleSignInListenerOnSignInParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.result = GoogleSignInResult.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeStruct(result, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "result of struct _GoogleSignInListenerOnSignInParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_GoogleSignInListenerOnSignInParams("
           "result: $result" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    return map;
  }
}


class _GoogleSignInListenerOnDisconnectedParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  GoogleSignInResult result = null;

  _GoogleSignInListenerOnDisconnectedParams() : super(kVersions.last.size);

  _GoogleSignInListenerOnDisconnectedParams.init(
    GoogleSignInResult this.result
  ) : super(kVersions.last.size);

  static _GoogleSignInListenerOnDisconnectedParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GoogleSignInListenerOnDisconnectedParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GoogleSignInListenerOnDisconnectedParams result = new _GoogleSignInListenerOnDisconnectedParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      result.result = GoogleSignInResult.decode(decoder1);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeStruct(result, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "result of struct _GoogleSignInListenerOnDisconnectedParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_GoogleSignInListenerOnDisconnectedParams("
           "result: $result" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["result"] = result;
    return map;
  }
}


class _GoogleSignInInitParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(24, 0)
  ];
  String clientId = null;
  GoogleSignInListenerInterface listener = null;

  _GoogleSignInInitParams() : super(kVersions.last.size);

  _GoogleSignInInitParams.init(
    String this.clientId, 
    GoogleSignInListenerInterface this.listener
  ) : super(kVersions.last.size);

  static _GoogleSignInInitParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GoogleSignInInitParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GoogleSignInInitParams result = new _GoogleSignInInitParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      result.clientId = decoder0.decodeString(8, false);
    }
    if (mainDataHeader.version >= 0) {
      
      result.listener = decoder0.decodeServiceInterface(16, false, GoogleSignInListenerProxy.newFromEndpoint);
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      encoder0.encodeString(clientId, 8, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "clientId of struct _GoogleSignInInitParams: $e";
      rethrow;
    }
    try {
      encoder0.encodeInterface(listener, 16, false);
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "listener of struct _GoogleSignInInitParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_GoogleSignInInitParams("
           "clientId: $clientId" ", "
           "listener: $listener" ")";
  }

  Map toJson() {
    throw new bindings.MojoCodecError(
        'Object containing handles cannot be encoded to JSON.');
  }
}


class _GoogleSignInSignInSilentlyParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _GoogleSignInSignInSilentlyParams() : super(kVersions.last.size);

  _GoogleSignInSignInSilentlyParams.init(
  ) : super(kVersions.last.size);

  static _GoogleSignInSignInSilentlyParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GoogleSignInSignInSilentlyParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GoogleSignInSignInSilentlyParams result = new _GoogleSignInSignInSilentlyParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
  }

  String toString() {
    return "_GoogleSignInSignInSilentlyParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _GoogleSignInSignInParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _GoogleSignInSignInParams() : super(kVersions.last.size);

  _GoogleSignInSignInParams.init(
  ) : super(kVersions.last.size);

  static _GoogleSignInSignInParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GoogleSignInSignInParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GoogleSignInSignInParams result = new _GoogleSignInSignInParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
  }

  String toString() {
    return "_GoogleSignInSignInParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _GoogleSignInSignOutParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _GoogleSignInSignOutParams() : super(kVersions.last.size);

  _GoogleSignInSignOutParams.init(
  ) : super(kVersions.last.size);

  static _GoogleSignInSignOutParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GoogleSignInSignOutParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GoogleSignInSignOutParams result = new _GoogleSignInSignOutParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
  }

  String toString() {
    return "_GoogleSignInSignOutParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _GoogleSignInDisconnectParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(8, 0)
  ];

  _GoogleSignInDisconnectParams() : super(kVersions.last.size);

  _GoogleSignInDisconnectParams.init(
  ) : super(kVersions.last.size);

  static _GoogleSignInDisconnectParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GoogleSignInDisconnectParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GoogleSignInDisconnectParams result = new _GoogleSignInDisconnectParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    encoder.getStructEncoderAtOffset(kVersions.last);
  }

  String toString() {
    return "_GoogleSignInDisconnectParams("")";
  }

  Map toJson() {
    Map map = new Map();
    return map;
  }
}


class _GoogleSignInSetScopesParams extends bindings.Struct {
  static const List<bindings.StructDataHeader> kVersions = const [
    const bindings.StructDataHeader(16, 0)
  ];
  List<String> scopes = null;

  _GoogleSignInSetScopesParams() : super(kVersions.last.size);

  _GoogleSignInSetScopesParams.init(
    List<String> this.scopes
  ) : super(kVersions.last.size);

  static _GoogleSignInSetScopesParams deserialize(bindings.Message message) {
    var decoder = new bindings.Decoder(message);
    var result = decode(decoder);
    if (decoder.excessHandles != null) {
      decoder.excessHandles.forEach((h) => h.close());
    }
    return result;
  }

  static _GoogleSignInSetScopesParams decode(bindings.Decoder decoder0) {
    if (decoder0 == null) {
      return null;
    }
    _GoogleSignInSetScopesParams result = new _GoogleSignInSetScopesParams();

    var mainDataHeader = decoder0.decodeStructDataHeader();
    if (mainDataHeader.version <= kVersions.last.version) {
      // Scan in reverse order to optimize for more recent versions.
      for (int i = kVersions.length - 1; i >= 0; --i) {
        if (mainDataHeader.version >= kVersions[i].version) {
          if (mainDataHeader.size == kVersions[i].size) {
            // Found a match.
            break;
          }
          throw new bindings.MojoCodecError(
              'Header size doesn\'t correspond to known version size.');
        }
      }
    } else if (mainDataHeader.size < kVersions.last.size) {
      throw new bindings.MojoCodecError(
        'Message newer than the last known version cannot be shorter than '
        'required by the last known version.');
    }
    if (mainDataHeader.version >= 0) {
      
      var decoder1 = decoder0.decodePointer(8, false);
      {
        var si1 = decoder1.decodeDataHeaderForPointerArray(bindings.kUnspecifiedArrayLength);
        result.scopes = new List<String>(si1.numElements);
        for (int i1 = 0; i1 < si1.numElements; ++i1) {
          
          result.scopes[i1] = decoder1.decodeString(bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i1, false);
        }
      }
    }
    return result;
  }

  void encode(bindings.Encoder encoder) {
    var encoder0 = encoder.getStructEncoderAtOffset(kVersions.last);
    try {
      if (scopes == null) {
        encoder0.encodeNullPointer(8, false);
      } else {
        var encoder1 = encoder0.encodePointerArray(scopes.length, 8, bindings.kUnspecifiedArrayLength);
        for (int i0 = 0; i0 < scopes.length; ++i0) {
          encoder1.encodeString(scopes[i0], bindings.ArrayDataHeader.kHeaderSize + bindings.kPointerSize * i0, false);
        }
      }
    } on bindings.MojoCodecError catch(e) {
      e.message = "Error encountered while encoding field "
          "scopes of struct _GoogleSignInSetScopesParams: $e";
      rethrow;
    }
  }

  String toString() {
    return "_GoogleSignInSetScopesParams("
           "scopes: $scopes" ")";
  }

  Map toJson() {
    Map map = new Map();
    map["scopes"] = scopes;
    return map;
  }
}

const int _googleSignInListenerMethodOnSignInName = 0;
const int _googleSignInListenerMethodOnDisconnectedName = 1;

class _GoogleSignInListenerServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class GoogleSignInListener {
  static const String serviceName = null;

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _GoogleSignInListenerServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static GoogleSignInListenerProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    GoogleSignInListenerProxy p = new GoogleSignInListenerProxy.unbound();
    String name = serviceName ?? GoogleSignInListener.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void onSignIn(GoogleSignInResult result);
  void onDisconnected(GoogleSignInResult result);
}

abstract class GoogleSignInListenerInterface
    implements bindings.MojoInterface<GoogleSignInListener>,
               GoogleSignInListener {
  factory GoogleSignInListenerInterface([GoogleSignInListener impl]) =>
      new GoogleSignInListenerStub.unbound(impl);

  factory GoogleSignInListenerInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [GoogleSignInListener impl]) =>
      new GoogleSignInListenerStub.fromEndpoint(endpoint, impl);

  factory GoogleSignInListenerInterface.fromMock(
      GoogleSignInListener mock) =>
      new GoogleSignInListenerProxy.fromMock(mock);
}

abstract class GoogleSignInListenerInterfaceRequest
    implements bindings.MojoInterface<GoogleSignInListener>,
               GoogleSignInListener {
  factory GoogleSignInListenerInterfaceRequest() =>
      new GoogleSignInListenerProxy.unbound();
}

class _GoogleSignInListenerProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<GoogleSignInListener> {
  GoogleSignInListener impl;

  _GoogleSignInListenerProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _GoogleSignInListenerProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _GoogleSignInListenerProxyControl.unbound() : super.unbound();

  String get serviceName => GoogleSignInListener.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GoogleSignInListenerProxyControl($superString)";
  }
}

class GoogleSignInListenerProxy
    extends bindings.Proxy<GoogleSignInListener>
    implements GoogleSignInListener,
               GoogleSignInListenerInterface,
               GoogleSignInListenerInterfaceRequest {
  GoogleSignInListenerProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _GoogleSignInListenerProxyControl.fromEndpoint(endpoint));

  GoogleSignInListenerProxy.fromHandle(core.MojoHandle handle)
      : super(new _GoogleSignInListenerProxyControl.fromHandle(handle));

  GoogleSignInListenerProxy.unbound()
      : super(new _GoogleSignInListenerProxyControl.unbound());

  factory GoogleSignInListenerProxy.fromMock(GoogleSignInListener mock) {
    GoogleSignInListenerProxy newMockedProxy =
        new GoogleSignInListenerProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static GoogleSignInListenerProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GoogleSignInListenerProxy"));
    return new GoogleSignInListenerProxy.fromEndpoint(endpoint);
  }


  void onSignIn(GoogleSignInResult result) {
    if (impl != null) {
      impl.onSignIn(result);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GoogleSignInListenerOnSignInParams();
    params.result = result;
    ctrl.sendMessage(params,
        _googleSignInListenerMethodOnSignInName);
  }
  void onDisconnected(GoogleSignInResult result) {
    if (impl != null) {
      impl.onDisconnected(result);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GoogleSignInListenerOnDisconnectedParams();
    params.result = result;
    ctrl.sendMessage(params,
        _googleSignInListenerMethodOnDisconnectedName);
  }
}

class _GoogleSignInListenerStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<GoogleSignInListener> {
  GoogleSignInListener _impl;

  _GoogleSignInListenerStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [GoogleSignInListener impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _GoogleSignInListenerStubControl.fromHandle(
      core.MojoHandle handle, [GoogleSignInListener impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _GoogleSignInListenerStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => GoogleSignInListener.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _googleSignInListenerMethodOnSignInName:
        var params = _GoogleSignInListenerOnSignInParams.deserialize(
            message.payload);
        _impl.onSignIn(params.result);
        break;
      case _googleSignInListenerMethodOnDisconnectedName:
        var params = _GoogleSignInListenerOnDisconnectedParams.deserialize(
            message.payload);
        _impl.onDisconnected(params.result);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  GoogleSignInListener get impl => _impl;
  set impl(GoogleSignInListener d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GoogleSignInListenerStubControl($superString)";
  }

  int get version => 0;
}

class GoogleSignInListenerStub
    extends bindings.Stub<GoogleSignInListener>
    implements GoogleSignInListener,
               GoogleSignInListenerInterface,
               GoogleSignInListenerInterfaceRequest {
  GoogleSignInListenerStub.unbound([GoogleSignInListener impl])
      : super(new _GoogleSignInListenerStubControl.unbound(impl));

  GoogleSignInListenerStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [GoogleSignInListener impl])
      : super(new _GoogleSignInListenerStubControl.fromEndpoint(endpoint, impl));

  GoogleSignInListenerStub.fromHandle(
      core.MojoHandle handle, [GoogleSignInListener impl])
      : super(new _GoogleSignInListenerStubControl.fromHandle(handle, impl));

  static GoogleSignInListenerStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GoogleSignInListenerStub"));
    return new GoogleSignInListenerStub.fromEndpoint(endpoint);
  }


  void onSignIn(GoogleSignInResult result) {
    return impl.onSignIn(result);
  }
  void onDisconnected(GoogleSignInResult result) {
    return impl.onDisconnected(result);
  }
}

const int _googleSignInMethodInitName = 0;
const int _googleSignInMethodSignInSilentlyName = 1;
const int _googleSignInMethodSignInName = 2;
const int _googleSignInMethodSignOutName = 3;
const int _googleSignInMethodDisconnectName = 4;
const int _googleSignInMethodSetScopesName = 5;

class _GoogleSignInServiceDescription implements service_describer.ServiceDescription {
  void getTopLevelInterface(Function responder) {
    responder(null);
  }

  void getTypeDefinition(String typeKey, Function responder) {
    responder(null);
  }

  void getAllTypeDefinitions(Function responder) {
    responder(null);
  }
}

abstract class GoogleSignIn {
  static const String serviceName = "google::GoogleSignIn";

  static service_describer.ServiceDescription _cachedServiceDescription;
  static service_describer.ServiceDescription get serviceDescription {
    if (_cachedServiceDescription == null) {
      _cachedServiceDescription = new _GoogleSignInServiceDescription();
    }
    return _cachedServiceDescription;
  }

  static GoogleSignInProxy connectToService(
      bindings.ServiceConnector s, String url, [String serviceName]) {
    GoogleSignInProxy p = new GoogleSignInProxy.unbound();
    String name = serviceName ?? GoogleSignIn.serviceName;
    if ((name == null) || name.isEmpty) {
      throw new core.MojoApiError(
          "If an interface has no ServiceName, then one must be provided.");
    }
    s.connectToService(url, p, name);
    return p;
  }
  void init(String clientId, GoogleSignInListenerInterface listener);
  void signInSilently();
  void signIn();
  void signOut();
  void disconnect();
  void setScopes(List<String> scopes);
}

abstract class GoogleSignInInterface
    implements bindings.MojoInterface<GoogleSignIn>,
               GoogleSignIn {
  factory GoogleSignInInterface([GoogleSignIn impl]) =>
      new GoogleSignInStub.unbound(impl);

  factory GoogleSignInInterface.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint,
      [GoogleSignIn impl]) =>
      new GoogleSignInStub.fromEndpoint(endpoint, impl);

  factory GoogleSignInInterface.fromMock(
      GoogleSignIn mock) =>
      new GoogleSignInProxy.fromMock(mock);
}

abstract class GoogleSignInInterfaceRequest
    implements bindings.MojoInterface<GoogleSignIn>,
               GoogleSignIn {
  factory GoogleSignInInterfaceRequest() =>
      new GoogleSignInProxy.unbound();
}

class _GoogleSignInProxyControl
    extends bindings.ProxyMessageHandler
    implements bindings.ProxyControl<GoogleSignIn> {
  GoogleSignIn impl;

  _GoogleSignInProxyControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) : super.fromEndpoint(endpoint);

  _GoogleSignInProxyControl.fromHandle(
      core.MojoHandle handle) : super.fromHandle(handle);

  _GoogleSignInProxyControl.unbound() : super.unbound();

  String get serviceName => GoogleSignIn.serviceName;

  void handleResponse(bindings.ServiceMessage message) {
    switch (message.header.type) {
      default:
        proxyError("Unexpected message type: ${message.header.type}");
        close(immediate: true);
        break;
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GoogleSignInProxyControl($superString)";
  }
}

class GoogleSignInProxy
    extends bindings.Proxy<GoogleSignIn>
    implements GoogleSignIn,
               GoogleSignInInterface,
               GoogleSignInInterfaceRequest {
  GoogleSignInProxy.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint)
      : super(new _GoogleSignInProxyControl.fromEndpoint(endpoint));

  GoogleSignInProxy.fromHandle(core.MojoHandle handle)
      : super(new _GoogleSignInProxyControl.fromHandle(handle));

  GoogleSignInProxy.unbound()
      : super(new _GoogleSignInProxyControl.unbound());

  factory GoogleSignInProxy.fromMock(GoogleSignIn mock) {
    GoogleSignInProxy newMockedProxy =
        new GoogleSignInProxy.unbound();
    newMockedProxy.impl = mock;
    return newMockedProxy;
  }

  static GoogleSignInProxy newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GoogleSignInProxy"));
    return new GoogleSignInProxy.fromEndpoint(endpoint);
  }


  void init(String clientId, GoogleSignInListenerInterface listener) {
    if (impl != null) {
      impl.init(clientId, listener);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GoogleSignInInitParams();
    params.clientId = clientId;
    params.listener = listener;
    ctrl.sendMessage(params,
        _googleSignInMethodInitName);
  }
  void signInSilently() {
    if (impl != null) {
      impl.signInSilently();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GoogleSignInSignInSilentlyParams();
    ctrl.sendMessage(params,
        _googleSignInMethodSignInSilentlyName);
  }
  void signIn() {
    if (impl != null) {
      impl.signIn();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GoogleSignInSignInParams();
    ctrl.sendMessage(params,
        _googleSignInMethodSignInName);
  }
  void signOut() {
    if (impl != null) {
      impl.signOut();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GoogleSignInSignOutParams();
    ctrl.sendMessage(params,
        _googleSignInMethodSignOutName);
  }
  void disconnect() {
    if (impl != null) {
      impl.disconnect();
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GoogleSignInDisconnectParams();
    ctrl.sendMessage(params,
        _googleSignInMethodDisconnectName);
  }
  void setScopes(List<String> scopes) {
    if (impl != null) {
      impl.setScopes(scopes);
      return;
    }
    if (!ctrl.isBound) {
      ctrl.proxyError("The Proxy is closed.");
      return;
    }
    var params = new _GoogleSignInSetScopesParams();
    params.scopes = scopes;
    ctrl.sendMessage(params,
        _googleSignInMethodSetScopesName);
  }
}

class _GoogleSignInStubControl
    extends bindings.StubMessageHandler
    implements bindings.StubControl<GoogleSignIn> {
  GoogleSignIn _impl;

  _GoogleSignInStubControl.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [GoogleSignIn impl])
      : super.fromEndpoint(endpoint, autoBegin: impl != null) {
    _impl = impl;
  }

  _GoogleSignInStubControl.fromHandle(
      core.MojoHandle handle, [GoogleSignIn impl])
      : super.fromHandle(handle, autoBegin: impl != null) {
    _impl = impl;
  }

  _GoogleSignInStubControl.unbound([this._impl]) : super.unbound();

  String get serviceName => GoogleSignIn.serviceName;



  void handleMessage(bindings.ServiceMessage message) {
    if (bindings.ControlMessageHandler.isControlMessage(message)) {
      bindings.ControlMessageHandler.handleMessage(
          this, 0, message);
      return;
    }
    if (_impl == null) {
      throw new core.MojoApiError("$this has no implementation set");
    }
    switch (message.header.type) {
      case _googleSignInMethodInitName:
        var params = _GoogleSignInInitParams.deserialize(
            message.payload);
        _impl.init(params.clientId, params.listener);
        break;
      case _googleSignInMethodSignInSilentlyName:
        _impl.signInSilently();
        break;
      case _googleSignInMethodSignInName:
        _impl.signIn();
        break;
      case _googleSignInMethodSignOutName:
        _impl.signOut();
        break;
      case _googleSignInMethodDisconnectName:
        _impl.disconnect();
        break;
      case _googleSignInMethodSetScopesName:
        var params = _GoogleSignInSetScopesParams.deserialize(
            message.payload);
        _impl.setScopes(params.scopes);
        break;
      default:
        throw new bindings.MojoCodecError("Unexpected message name");
        break;
    }
  }

  GoogleSignIn get impl => _impl;
  set impl(GoogleSignIn d) {
    if (d == null) {
      throw new core.MojoApiError("$this: Cannot set a null implementation");
    }
    if (isBound && (_impl == null)) {
      beginHandlingEvents();
    }
    _impl = d;
  }

  @override
  void bind(core.MojoMessagePipeEndpoint endpoint) {
    super.bind(endpoint);
    if (!isOpen && (_impl != null)) {
      beginHandlingEvents();
    }
  }

  @override
  String toString() {
    var superString = super.toString();
    return "_GoogleSignInStubControl($superString)";
  }

  int get version => 0;
}

class GoogleSignInStub
    extends bindings.Stub<GoogleSignIn>
    implements GoogleSignIn,
               GoogleSignInInterface,
               GoogleSignInInterfaceRequest {
  GoogleSignInStub.unbound([GoogleSignIn impl])
      : super(new _GoogleSignInStubControl.unbound(impl));

  GoogleSignInStub.fromEndpoint(
      core.MojoMessagePipeEndpoint endpoint, [GoogleSignIn impl])
      : super(new _GoogleSignInStubControl.fromEndpoint(endpoint, impl));

  GoogleSignInStub.fromHandle(
      core.MojoHandle handle, [GoogleSignIn impl])
      : super(new _GoogleSignInStubControl.fromHandle(handle, impl));

  static GoogleSignInStub newFromEndpoint(
      core.MojoMessagePipeEndpoint endpoint) {
    assert(endpoint.setDescription("For GoogleSignInStub"));
    return new GoogleSignInStub.fromEndpoint(endpoint);
  }


  void init(String clientId, GoogleSignInListenerInterface listener) {
    return impl.init(clientId, listener);
  }
  void signInSilently() {
    return impl.signInSilently();
  }
  void signIn() {
    return impl.signIn();
  }
  void signOut() {
    return impl.signOut();
  }
  void disconnect() {
    return impl.disconnect();
  }
  void setScopes(List<String> scopes) {
    return impl.setScopes(scopes);
  }
}



